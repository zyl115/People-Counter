import numpy as np
import cv2
count = 0 
im = cv2.VideoCapture(0)
fgbg = cv2.createBackgroundSubtractorMOG2(varThreshold=95) # background reduction function

found = 0
while(found == 0): # loop until first set of contours are found
    ret, old_frame = im.read() # capture a frame from the camera
    old_fgmask = fgbg.apply(old_frame) # apply background reduction
    old_retval, old_threshold = cv2.threshold(old_fgmask, 10, 255, cv2.THRESH_BINARY)
    # convert the mask generated by the background subtractor into binary image
    old_median = cv2.medianBlur(old_threshold,55) # reduce noise
    old_median = cv2.dilate(old_median, None, iterations = 3) # connect gaps around the blobs
    old_median = cv2.erode(old_median, None, iterations = 3) # shrink the blobsq
    
    # find first contours of moving objects
    image, old_contours, hierarchy = cv2.findContours(old_median,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
    if len(old_contours) > 0:
        try: hierarchy = hierarchy[0]
        except: hierarchy = []
        
        # draw a rectangular box bounding each detected contour
        for contour, hier in zip(old_contours, hierarchy):
            (x,y,w,h) = cv2.boundingRect(contour)
            if (w > 140) and (h > 140): # only a contour with w and h both greater than 140 will be considered valid
                # find the centroid of the rectangular box
                old_x1 = w/2      
                old_y1 = h/2
                old_cx = x+old_x1
                old_cy = y+old_y1
                old_centroid = (old_cx,old_cy)
                found = 1 # update found and terminate the loop
                
    
        
while(1):
                
    ret, frame = im.read()
    fgmask = fgbg.apply(frame) # apply background reduction
    retval, threshold = cv2.threshold(fgmask, 10, 255, cv2.THRESH_BINARY)
    # convert the mask generated by background subtractor into binary image
    median = cv2.medianBlur(threshold,55) # smoothen the blobs
    median = cv2.dilate(median, None, iterations = 3) # connect gaps around the blobs
    median = cv2.erode(median, None, iterations = 3) # shrink the blobs
    

    # find contours of moving object
    image, contours, hierarchy = cv2.findContours(median,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

    # draw a line on the frame
    line = 240
    cv2.line(frame, (0, line), (660, line), (0,255,0), 4) #draw line

    if len(contours) > 0:
        try: hierarchy = hierarchy[0]
        except: hierarchy = []

        # draw a rectangular box bounding each detected contour
        for contour, hier in zip(contours, hierarchy):
            (x,y,w,h) = cv2.boundingRect(contour)
            if (w > 140) and (h > 140): # only a contour with w and h both greater than 140 will be considered valid
                cv2.rectangle(frame, (x,y), (x+w,y+h), (255, 0, 0), 3)
                # compute the centroid of the rectangular box
                x1 = w/2      
                y1 = h/2
                cx = x+x1
                cy = y+y1
                centroid = (cx,cy)
                cv2.circle(frame,(int(old_cx),int(old_cy)),2,(255,0,0),-1) #show coordinates of previous centroid
                cv2.circle(frame,(int(cx),int(cy)),2,(0,0,255),-1) #show coordinates of current centroid

                # this condition only occurs if the distance between
                # the current centroid and the old centroid is less than 300
                if abs(cy - old_cy) < 300:
                    if cy > line: # direction: DOWN
                        if old_cy < line:
                            if h*w > 300000: # if area of rectangular box is greater than 300000, count += 2
                                count += 2
                            else:
                                count += 1

                    if cy < line: # direction: LEFT
                        if old_cy > line:
                            if h*w > 300000: # if area of rectangular box is greater than 300000, count -= 2
                                count -= 2
                            else:
                                count -= 1

                #update centroid
                old_cy = cy
                old_cx = cx
                    
    
    
    # write number of count
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(frame, str(count) ,(320,430), font, 1, (255,0,0), 2, cv2.LINE_AA)

    cv2.imshow('frame', frame) # show image captured by camera
    cv2.imshow('median', median) # show background reduced image

    k = cv2.waitKey(1) & 0xFF
    if k == ord('q'):
        break # break the loop when q is keyed in

im.release()
cv2.destroyAllWindows()
